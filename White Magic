from Tkinter import *
import sys
import time
import random
import math

class Object:
    t = 60
    r = 100
    

window = Tk()
window.title("ALL PROJECT 3")
canvas = Canvas(window, width = 700, height = 700, bg = 'white')
canvas.pack(padx = 1, pady = 1)

t_list = [1, 2, 3, 4]

t_list[1] = Object()

count = 1

t_list[count].t = 500
t_list[count].r = 250


class Treasure(Object):
    def __init__(self, image, x, y, anchor = NW):
        self.image = image
        self.x, self.y = x, y
    def createImage(self, canvas):
        self.canvas = canvas
        self.image = PhotoImage(file=self.image)
        self.treasure = canvas.create_image(self.x, self.y, image=self.image)

class Robot(Object):
    def __init__ (self, x, y, size = 5, colour = 'brown'):
        self.x = x
        self.y = y
        self.size = size
        self.colour = colour
        self.a = Object.t - self.x
        self.o = Object.r - self.y
        self.velocity = [1, 1]
        self.vx = self.a/50.0
        self.vy = self.a/50.0
        self.assigned_treasure = None
        self.speed = [5, 5]
    def find(self):
        self.x += self.vx
        self.y += self.vy
        self.canvas.coords(self.robot, self.x, self.y, self.x + self.size, self.y + self.size)
        self.canvas.update()

    def update(self, treasures):
        if self.assigned_treasure is None:
            pass # no treasure assigned
            treasure = treasures[random.randint(0, len(treasures) - 1)]
            self.assigned_treasure = treasure

            if treasure.x > self.x:
                self.velocity[0] = 1
            elif treasure.x < self.x:
                self.velocity[0] = -1
            else:
                self.velocity[0] = 0

            if treasure.y > self.y:
                self.velocity[1] = 1
            elif treasure.y < self.y:
                self.velocity[1] = -1
            else:
                self.velocity[1] = 0
        else:
            # treasure assigned, carry on
            pass
            self.x += self.speed[0] * self.velocity[0]
            self.y += self.speed[1] * self.velocity[1]
            xdone, ydone = False, False
            if ((self.x > self.assigned_treasure.x and self.velocity[0] == 1)
                or (self.x < self.assigned_treasure.x and self.velocity[0] == -1)
                or (self.x == self.assigned_treasure.x)):

                self.x = self.assigned_treasure.x
                xdone = True
            if ((self.y > self.assigned_treasure.y and self.velocity[1] == 1)
                or (self.y < self.assigned_treasure.y and self.velocity[1] == -1)
                or (self.y == self.assigned_treasure.y)):
                self.y = self.assigned_treasure.y
                ydone = True
            if xdone and ydone:
                # at the treasure
                self.assigned_treasure = None
            self.canvas.coords(self.robot, self.x, self.y, self.x + self.size, self.y + self.size)

    def drawRobot(self, canvas):
        self.canvas = canvas
        self.robot = canvas.create_oval(self.x, self.y, self.x + self.size, self.y + self.size, fill = self.colour)

'''
ruby = Treasure('ruby.gif', 400, 400)
ruby.createImage(canvas)
'''

treasure_array = []
for i in range(0, 4):
    treasure = Treasure('ruby.gif', random.randint(50, 600), random.randint(100, 600))
    treasure.createImage(canvas)
    treasure_array.append(treasure)


robot = Robot(340, 340, size = 10)
robot.drawRobot(canvas)

# infinite while loop for robot movement
while 1:
    #robot.find()
    robot.update(treasure_array)
    time.sleep(0.05)
    canvas.update()


'''
for t in range(500):
    robot.find()
    print robot.vx
    time.sleep(0.1)
'''


canvas.update()
window.mainloop()
